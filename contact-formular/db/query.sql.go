// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addMessage = `-- name: AddMessage :exec
INSERT INTO mailbox (
  id, name, email, date, approval, IsRead
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type AddMessageParams struct {
	ID       int64
	Name     string
	Email    string
	Date     int64
	Approval sql.NullInt64
	Isread   sql.NullInt64
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) error {
	_, err := q.db.ExecContext(ctx, addMessage,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Date,
		arg.Approval,
		arg.Isread,
	)
	return err
}

const getAllMessages = `-- name: GetAllMessages :many
SELECT id, name, email, date, approval, IsRead FROM mailbox ORDER BY date ASC
`

func (q *Queries) GetAllMessages(ctx context.Context) ([]Mailbox, error) {
	rows, err := q.db.QueryContext(ctx, getAllMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mailbox
	for rows.Next() {
		var i Mailbox
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Date,
			&i.Approval,
			&i.Isread,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadMessage = `-- name: GetUnreadMessage :many
SELECT id, name, email, date, approval, IsRead FROM mailbox WHERE IsRead IS NULL ORDER BY date ASC
`

func (q *Queries) GetUnreadMessage(ctx context.Context) ([]Mailbox, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadMessage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mailbox
	for rows.Next() {
		var i Mailbox
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Date,
			&i.Approval,
			&i.Isread,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
